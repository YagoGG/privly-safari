/**
 * @fileOverview This file provides for posting new links generated by the
 * extension to a host page.
 *
 * Posting Process:
 *
 * 1. The user selects an editable element with a right click
 * 2. The user clicks Privly New Message in the resultant context menu.
 * 3. This script records the host page the link will be posted to.
 * 4. The script opens a posting window and records the tab.
 * 5. The posting application will complete and send this script
 *    a message with the Privly URL.
 * 6. The script sends the host page's content script,
 *    post_new_link.js, the URL
 */


/**
 * @namepspace Functionality for posting new links to pages.
 */
var postingProcess = {

  /**
   * Handles right click on form event by opening posting window.
   *
   * @param info the information on the context menu generating this event
   * @param postingApplicationName the name of the posting application.
   * for examples, see the creation of the context menus below. Current values
   * include PlainPost and Message.
   */
  postingHandler: function(info, postingApplicationName) {

    // Only open a new posting window
    if (postingProcess.postingApplicationTab === undefined) {

      var postingDomain = Privly.storage.get("posting_content_server_url");
      if (postingDomain === null) {
        postingDomain = "https://privlyalpha.org";
        Privly.storage.set("posting_content_server_url", postingDomain);
      }

      var postingApplicationUrl = safari.extension.baseURI + "privly-applications/" +
                                                             postingApplicationName +
                                                             "/new.html";

      if (info !== undefined) {
        postingProcess.postingApplicationStartingValue = info;
      } else {
        postingProcess.postingApplicationStartingValue = "";
      }

      // Remember the tab where the post will be placed. The content script will
      // remember which form element was clicked
      postingProcess.postingResultTab = safari.application.activeBrowserWindow.activeTab;

      // Open a new window
      var newWindow = safari.application.activeBrowserWindow.openTab();
      newWindow.url = postingApplicationUrl;

      // Remember the posting tab
      postingProcess.postingApplicationTab = newWindow;

      // Tell the host page not to change the posting location on subsequent
      // right click events
      Privly.message.messageContentScripts({pendingPost: true});
    } else {

      // Notify the user about a pending post
      var notification = new Notification("There is already a pending post");
    }
  },

  /**
   * Send the privly-application the initial content, if there is any.
   *
   * @param evt the message event that is received
   * @param sendResponse the callback function for replying to the message
   *
   */
  sendInitialContent: function(evt, sendResponse) {

    if (evt.ask !== undefined && evt.ask === "initialContent") {
      sendResponse({initialContent: postingProcess.postingApplicationStartingValue});
    }
  },

  /**
   * Handles the receipt of the Privly URLs from the posting application
   * for addition to the host page.
   *
   * @param evt the message event that is received
   * @param sendResponse the callback function for replying to the message
   *
   */
  receiveNewPrivlyUrl: function(evt, sendResponse) {

    if (evt.privlyUrl !== undefined) {

      // Switches current tab to the page receiving the URL
      postingProcess.postingResultTab.activate();

      // Sends URL to the host page
      Privly.message.messageContentScripts({privlyUrl: evt.privlyUrl, pendingPost: false});

      // Close the posting application
      postingProcess.postingApplicationTab.close();

      // Remove the record of the posting application
      postingProcess.postingApplicationTab = undefined;

      // Remove the record of where we are posting to
      postingProcess.postingResultTab = undefined;
    }
  },

  /**
   * Handle closure of posting application tabs. If the posting application
   * or host page closes, the state should reset. The posting form will close
   * as well.
   *
   * @param evt the event which is fired when a tab is closed
   */
  tabClosed: function(evt) {

    if (postingProcess.postingResultTab === undefined ||
        postingProcess.postingApplicationTab === undefined) {
          return;
    }

    if (evt.target instanceof SafariBrowserTab) {
      if (evt.target === postingProcess.postingApplicationTab) {
        // The tab generating the URL closed
        Privly.message.messageContentScripts({pendingPost: false});
      } else if (evt.target === postingProcess.postingResultTab) {
        // The tab receiving the URL closed
        postingProcess.postingApplicationTab.close();
      }
    }

    // Reset the state
    postingProcess.postingResultTab = undefined;
    postingProcess.postingApplicationTab = undefined;
    postingProcess.postingApplicationStartingValue = "";
  },

  // Remembers where the PrivlyUrl will be placed based on the context menu
  postingResultTab: undefined,
  postingApplicationTab: undefined,
  postingApplicationStartingValue: "",

  /**
   * Sends the privly button status to the content script
   *
   * @param evt the message event received
   *
   */
  sendButtonStatus: function(evt) {
    if (evt.name === "privlyMessage" && evt.message === "PrivlyBtnStatus") {
      Privly.message.messageContentScripts({PrivlyBtnStatus: Privly.options.isPrivlyButtonEnabled()});
    }
  },

  /**
   * Makes a new post when indicated from the privly button
   *
   * @param evt the message event received
   *
   */
  makeNewPost: function(evt) {
    if (evt.name === "privlyMessage" && evt.message === "newPost") {
      postingProcess.postingHandler("", "Message");
    }
  },

  /**
   * Shows notification about pending post
   *
   * @param evt the message event received
   *
   */
  showPendingPostNotification: function(evt) {
    if (evt.name === "privlyMessage" && evt.message === "showNotification") {
      var notification = new Notification("There is already a pending post");
    }
  }
};

// Attach the message and the closed tabs listeners
Privly.message.addListener(postingProcess.sendInitialContent, true);
Privly.message.addListener(postingProcess.receiveNewPrivlyUrl, true);
if (typeof safari !== "undefined" && safari.application !== undefined) {
  safari.application.addEventListener("close", postingProcess.tabClosed, true);
  safari.application.addEventListener("message", postingProcess.sendButtonStatus);
  safari.application.addEventListener("message", postingProcess.makeNewPost);
  safari.application.addEventListener("message", postingProcess.showPendingPostNotification);
}
